{"ast":null,"code":"import { GridQuery, HEADER_CLASS, FOOTER_CLASS } from './grid-query';\nvar FIRST_CLASS = 'k-first';\n\nvar appendNodes = function (element, nodes) {\n  var length = nodes.length;\n\n  for (var idx = 0; idx < length; idx++) {\n    element.appendChild(nodes[idx].cloneNode(true));\n  }\n};\n\nvar wrapTable = function (table) {\n  var wrapper = document.createElement('div');\n  wrapper.className = 'k-widget k-grid';\n  wrapper.appendChild(table);\n  return wrapper;\n};\n\nvar createTableElement = function (sources) {\n  var sourceCount = sources.length;\n  var element = sources[0].cloneNode(true);\n  var rowsCount = element.rows.length;\n\n  if (sourceCount > 1) {\n    for (var rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n      for (var sourceIdx = 1; sourceIdx < sourceCount; sourceIdx++) {\n        appendNodes(element.rows[rowIdx], sources[sourceIdx].rows[rowIdx].cells);\n      }\n    }\n  }\n\n  return element;\n};\n\nvar setFirstCellClass = function (header, headers) {\n  if (headers.length > 1 && header.rows.length > 1) {\n    for (var idx = 1; idx < header.rows.length; idx++) {\n      var firstCellIndex = headers[0].rows[idx].cells.length;\n      var cell = header.rows[idx].cells[firstCellIndex];\n\n      if (String(cell.className).indexOf(FIRST_CLASS) === -1) {\n        cell.className += \" \" + FIRST_CLASS;\n      }\n    }\n  }\n};\n\nvar createTable = function (colGroups, headers, bodies, footers) {\n  var table = document.createElement('table');\n  var colGroup = colGroups[0].cloneNode(true);\n\n  for (var idx = 1; idx < colGroups.length; idx++) {\n    appendNodes(colGroup, colGroups[idx].querySelectorAll('col'));\n  }\n\n  var header = createTableElement(headers);\n  var body = createTableElement(bodies);\n  header.className = HEADER_CLASS;\n  setFirstCellClass(header, headers);\n  table.appendChild(colGroup);\n  table.appendChild(header);\n  table.appendChild(body);\n\n  if (footers.length) {\n    var footer = createTableElement(footers);\n    footer.className = FOOTER_CLASS;\n    table.appendChild(footer);\n  }\n\n  return wrapTable(table);\n};\n/**\n * @hidden\n */\n\n\nexport var exportElement = function (wrapper) {\n  var query = new GridQuery(wrapper);\n  var content = query.content();\n  var result;\n\n  if (content) {\n    var colGroups = [content.querySelector('colgroup')];\n    var headers = [query.header().querySelector('thead')];\n    var bodies = [content.querySelector('tbody')];\n    var footer = query.footer();\n    var footers = footer ? [footer.querySelector('tfoot')] : [];\n    result = createTable(colGroups, headers, bodies, footers);\n  } else {\n    result = wrapTable(query.table().cloneNode(true));\n  }\n\n  return result;\n};","map":{"version":3,"sources":["../../../src/grid/export-element.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { GridQuery, HEADER_CLASS, FOOTER_CLASS } from './grid-query';\nvar FIRST_CLASS = 'k-first';\nvar appendNodes = function (element, nodes) {\n    var length = nodes.length;\n    for (var idx = 0; idx < length; idx++) {\n        element.appendChild(nodes[idx].cloneNode(true));\n    }\n};\nvar wrapTable = function (table) {\n    var wrapper = document.createElement('div');\n    wrapper.className = 'k-widget k-grid';\n    wrapper.appendChild(table);\n    return wrapper;\n};\nvar createTableElement = function (sources) {\n    var sourceCount = sources.length;\n    var element = sources[0].cloneNode(true);\n    var rowsCount = element.rows.length;\n    if (sourceCount > 1) {\n        for (var rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n            for (var sourceIdx = 1; sourceIdx < sourceCount; sourceIdx++) {\n                appendNodes(element.rows[rowIdx], sources[sourceIdx].rows[rowIdx].cells);\n            }\n        }\n    }\n    return element;\n};\nvar setFirstCellClass = function (header, headers) {\n    if (headers.length > 1 && header.rows.length > 1) {\n        for (var idx = 1; idx < header.rows.length; idx++) {\n            var firstCellIndex = headers[0].rows[idx].cells.length;\n            var cell = header.rows[idx].cells[firstCellIndex];\n            if (String(cell.className).indexOf(FIRST_CLASS) === -1) {\n                cell.className += \" \" + FIRST_CLASS;\n            }\n        }\n    }\n};\nvar createTable = function (colGroups, headers, bodies, footers) {\n    var table = document.createElement('table');\n    var colGroup = colGroups[0].cloneNode(true);\n    for (var idx = 1; idx < colGroups.length; idx++) {\n        appendNodes(colGroup, colGroups[idx].querySelectorAll('col'));\n    }\n    var header = createTableElement(headers);\n    var body = createTableElement(bodies);\n    header.className = HEADER_CLASS;\n    setFirstCellClass(header, headers);\n    table.appendChild(colGroup);\n    table.appendChild(header);\n    table.appendChild(body);\n    if (footers.length) {\n        var footer = createTableElement(footers);\n        footer.className = FOOTER_CLASS;\n        table.appendChild(footer);\n    }\n    return wrapTable(table);\n};\n/**\n * @hidden\n */\nexport var exportElement = function (wrapper) {\n    var query = new GridQuery(wrapper);\n    var content = query.content();\n    var result;\n    if (content) {\n        var colGroups = [content.querySelector('colgroup')];\n        var headers = [query.header().querySelector('thead')];\n        var bodies = [content.querySelector('tbody')];\n        var footer = query.footer();\n        var footers = footer ? [footer.querySelector('tfoot')] : [];\n        result = createTable(colGroups, headers, bodies, footers);\n    }\n    else {\n        result = wrapTable(query.table().cloneNode(true));\n    }\n    return result;\n};\n//# sourceMappingURL=export-element.js.map"]},"metadata":{},"sourceType":"module"}