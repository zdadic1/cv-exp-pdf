{"ast":null,"code":"var KEY_STR = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar fromCharCode = String.fromCharCode;\n\nfunction encodeUTF8(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length; i++) {\n    var c = input.charCodeAt(i);\n\n    if (c < 0x80) {\n      // One byte\n      output += fromCharCode(c);\n    } else if (c < 0x800) {\n      // Two bytes\n      output += fromCharCode(0xC0 | c >>> 6);\n      output += fromCharCode(0x80 | c & 0x3f);\n    } else if (c < 0x10000) {\n      // Three bytes\n      output += fromCharCode(0xE0 | c >>> 12);\n      output += fromCharCode(0x80 | c >>> 6 & 0x3f);\n      output += fromCharCode(0x80 | c & 0x3f);\n    }\n  }\n\n  return output;\n}\n\nexport default function encodeBase64(input) {\n  var output = \"\";\n  var i = 0;\n  var utfInput = encodeUTF8(input);\n\n  while (i < utfInput.length) {\n    var chr1 = utfInput.charCodeAt(i++);\n    var chr2 = utfInput.charCodeAt(i++);\n    var chr3 = utfInput.charCodeAt(i++);\n    var enc1 = chr1 >> 2;\n    var enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n    var enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n    var enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) + KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);\n  }\n\n  return output;\n}","map":{"version":3,"sources":["C:/Users/Zvone/Desktop/new/cv-exp-pdf/node_modules/@progress/kendo-drawing/dist/es/util/encode-base64.js"],"names":["KEY_STR","fromCharCode","String","encodeUTF8","input","output","i","length","c","charCodeAt","encodeBase64","utfInput","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt"],"mappings":"AAAA,IAAIA,OAAO,GAAG,mEAAd;AACA,IAAIC,YAAY,GAAGC,MAAM,CAACD,YAA1B;;AAEA,SAASE,UAAT,CAAoBC,KAApB,EAA2B;AACvB,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAIE,CAAC,GAAGJ,KAAK,CAACK,UAAN,CAAiBH,CAAjB,CAAR;;AAEA,QAAIE,CAAC,GAAG,IAAR,EAAc;AACV;AACAH,MAAAA,MAAM,IAAIJ,YAAY,CAACO,CAAD,CAAtB;AACH,KAHD,MAGO,IAAIA,CAAC,GAAG,KAAR,EAAe;AAClB;AACAH,MAAAA,MAAM,IAAIJ,YAAY,CAAC,OAAQO,CAAC,KAAK,CAAf,CAAtB;AACAH,MAAAA,MAAM,IAAIJ,YAAY,CAAC,OAAQO,CAAC,GAAG,IAAb,CAAtB;AACH,KAJM,MAIA,IAAIA,CAAC,GAAG,OAAR,EAAiB;AACpB;AACAH,MAAAA,MAAM,IAAIJ,YAAY,CAAC,OAAQO,CAAC,KAAK,EAAf,CAAtB;AACAH,MAAAA,MAAM,IAAIJ,YAAY,CAAC,OAAQO,CAAC,KAAK,CAAN,GAAU,IAAnB,CAAtB;AACAH,MAAAA,MAAM,IAAIJ,YAAY,CAAC,OAAQO,CAAC,GAAG,IAAb,CAAtB;AACH;AACJ;;AAED,SAAOH,MAAP;AACH;;AAED,eAAe,SAASK,YAAT,CAAsBN,KAAtB,EAA6B;AACxC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,CAAC,GAAG,CAAR;AAEA,MAAIK,QAAQ,GAAGR,UAAU,CAACC,KAAD,CAAzB;;AAEA,SAAOE,CAAC,GAAGK,QAAQ,CAACJ,MAApB,EAA4B;AACxB,QAAIK,IAAI,GAAGD,QAAQ,CAACF,UAAT,CAAoBH,CAAC,EAArB,CAAX;AACA,QAAIO,IAAI,GAAGF,QAAQ,CAACF,UAAT,CAAoBH,CAAC,EAArB,CAAX;AACA,QAAIQ,IAAI,GAAGH,QAAQ,CAACF,UAAT,CAAoBH,CAAC,EAArB,CAAX;AAEA,QAAIS,IAAI,GAAGH,IAAI,IAAI,CAAnB;AACA,QAAII,IAAI,GAAI,CAACJ,IAAI,GAAG,CAAR,KAAc,CAAf,GAAqBC,IAAI,IAAI,CAAxC;AACA,QAAII,IAAI,GAAI,CAACJ,IAAI,GAAG,EAAR,KAAe,CAAhB,GAAsBC,IAAI,IAAI,CAAzC;AACA,QAAII,IAAI,GAAGJ,IAAI,GAAG,EAAlB;;AAEA,QAAIK,KAAK,CAACN,IAAD,CAAT,EAAiB;AACbI,MAAAA,IAAI,GAAGC,IAAI,GAAG,EAAd;AACH,KAFD,MAEO,IAAIC,KAAK,CAACL,IAAD,CAAT,EAAiB;AACpBI,MAAAA,IAAI,GAAG,EAAP;AACH;;AAEDb,IAAAA,MAAM,GAAGA,MAAM,GACXL,OAAO,CAACoB,MAAR,CAAeL,IAAf,CADK,GACkBf,OAAO,CAACoB,MAAR,CAAeJ,IAAf,CADlB,GAELhB,OAAO,CAACoB,MAAR,CAAeH,IAAf,CAFK,GAEkBjB,OAAO,CAACoB,MAAR,CAAeF,IAAf,CAF3B;AAGH;;AAED,SAAOb,MAAP;AACH","sourcesContent":["var KEY_STR = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar fromCharCode = String.fromCharCode;\n\nfunction encodeUTF8(input) {\n    var output = \"\";\n\n    for (var i = 0; i < input.length; i++) {\n        var c = input.charCodeAt(i);\n\n        if (c < 0x80) {\n            // One byte\n            output += fromCharCode(c);\n        } else if (c < 0x800) {\n            // Two bytes\n            output += fromCharCode(0xC0 | (c >>> 6));\n            output += fromCharCode(0x80 | (c & 0x3f));\n        } else if (c < 0x10000) {\n            // Three bytes\n            output += fromCharCode(0xE0 | (c >>> 12));\n            output += fromCharCode(0x80 | (c >>> 6 & 0x3f));\n            output += fromCharCode(0x80 | (c & 0x3f));\n        }\n    }\n\n    return output;\n}\n\nexport default function encodeBase64(input) {\n    var output = \"\";\n    var i = 0;\n\n    var utfInput = encodeUTF8(input);\n\n    while (i < utfInput.length) {\n        var chr1 = utfInput.charCodeAt(i++);\n        var chr2 = utfInput.charCodeAt(i++);\n        var chr3 = utfInput.charCodeAt(i++);\n\n        var enc1 = chr1 >> 2;\n        var enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n        var enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n        var enc4 = chr3 & 63;\n\n        if (isNaN(chr2)) {\n            enc3 = enc4 = 64;\n        } else if (isNaN(chr3)) {\n            enc4 = 64;\n        }\n\n        output = output +\n            KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) +\n            KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);\n    }\n\n    return output;\n}"]},"metadata":{},"sourceType":"module"}